//  trumpet.saol: generates a wavetable-based trumpet waveform 
//  with 8 harmonics and a multi-tiered amplitude envelope
//  Written by: Steve Pedersen

global {
  table cyc(harm, // fourier table 
            128,  // 128-bytes long
            1     // f0 weight
            );    // no partials

  srate 44100;   // CD-quality 
}


//
// instr trumpet
// table-driven version
// of tutorial example 2
//


instr trumpet (fr) {
  imports exports table cyc; 

  ivar delta, scalar;
 
  ksig env1,env2,env3,env4,env5,env6,env7,env8;
  asig y1,y2,y3,y4,y5,y6,y7,y8;

  delta = 0.2;
  scalar = 32768;

  printf("freq: %f\n",fr);

  // **********************
  // computed during k-pass
  // **********************

  env1 = (0, delta,2350, delta,2650, delta,2850, delta,2700, delta,2750, delta,2600, delta,2500, delta,2250, delta,1650, delta,1150, delta,550, delta,25, delta,0);
  env2 = (0, delta,2400, delta,2950, delta,3000, delta,2850, delta,2800, delta,2700, delta,2500, delta,2100, delta,1400, delta,800,  delta,350, delta,10, delta,0);
  env3 = (0, delta,800,  delta,1700, delta,1500, delta,1700, delta,1950, delta,1950, delta,2400, delta,1950, delta,1500, delta,900,  delta,150, delta,0,  delta,0);
  env4 = (0, delta,1200, delta,1100, delta,1250, delta,1150, delta,1400, delta,1500, delta,2000, delta,1700, delta,1500, delta,750,  delta,50,  delta,0,  delta,0);
  env5 = (0, delta,1600, delta,2500, delta,2650, delta,2500, delta,2400, delta,2250, delta,1900, delta,1500, delta,1000, delta,250,  delta,10,  delta,0,  delta,0);
  env6 = (0, delta,1950, delta,2250, delta,2700, delta,2500, delta,2400, delta,2100, delta,1900, delta,1350, delta,1000, delta,200,  delta,15,  delta,0,  delta,0);
  env7 = (0, delta,1300, delta,2100, delta,2200, delta,1850, delta,1750, delta,1700, delta,1300, delta,950,  delta,500,  delta,50,   delta,5,   delta,0,  delta,0);
  env8 = (0, delta,1500, delta,2400, delta,2500, delta,2100, delta,2000, delta,1850, delta,1500, delta,900,  delta,500,  delta,100,  delta,5,   delta,0,  delta,0);


  // **********************
  // computed during a-pass
  // **********************

  y1 = env1 * oscil(cyc, fr * 1);
  y2 = env2 * oscil(cyc, fr * 2);
  y3 = env3 * oscil(cyc, fr * 3);
  y4 = env4 * oscil(cyc, fr * 4);
  y5 = env5 * oscil(cyc, fr * 5);
  y6 = env6 * oscil(cyc, fr * 6);
  y7 = env7 * oscil(cyc, fr * 7);
  y8 = env8 * oscil(cyc, fr * 8);
  
  output((y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8) / scalar);

}
